@page "/counter"
@implements IAsyncDisposable
@inject NavigationManager navigationManager
@inject HttpClient httpClient

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
        {
            currentCount = await httpClient.GetFromJsonAsync<int>("count");

            hubConnection = new HubConnectionBuilder()
                .WithUrl(navigationManager.ToAbsoluteUri("/CountHub"))
                .WithAutomaticReconnect()
                .Build();
            
            hubConnection.On<int>("UpdatedCount", async count =>
                {
                    currentCount = count;
                    await InvokeAsync(() => StateHasChanged());
                });
            
            await hubConnection.StartAsync(cancellationTokenSource.Token);
        }    

    private async Task IncrementCount()
    {
        await httpClient.PostAsJsonAsync("count", "increment");
    }

    public async ValueTask DisposeAsync()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();

        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
